import OVN_Northbound as nb
import OVN_Southbound as sb
import ovsdb
import helpers
import lswitch

/* IP Multicast per switch information. */
relation McastSwitchInfo(
    dpname:             string,
    enabled:            bool,
    flood_unregistered: bool,
    table_size:         integer //TODO: how do we enforce table size??
)

McastSwitchInfo(.dpname  = dpname,
                .enabled = enabled,
                .flood_unregistered = flood_unregistered,
                .table_size = table_size) :-
    nb.Logical_Switch(._uuid = ls_uuid, .other_config = other_config),
    sb.Out_IP_Multicast(.datapath = dpname, .enabled = mcast_enabled,
                        .table_size = mcast_table_size),
    dpname == uuid2name(ls_uuid),
    var enabled = {set_nth(mcast_enabled, 0) == Some{true}},
    Some{var table_size} = set_nth(mcast_table_size, 0),
    var flood_unregistered = map_get_bool_def(other_config, "mcast_flood_unregistered", false)
    .

/* IP_Multicast table */
sb.Out_IP_Multicast(.datapath = uuid2name(ls_uuid),
                    .enabled = set_singleton(mcast_snoop),
                    .querier = set_singleton(mcast_querier),
                    .eth_src = mcast_eth_src,
                    .ip4_src = mcast_ip4_src,
                    .table_size = set_singleton(mcast_table_size),
                    .idle_timeout = set_singleton(mcast_idle_timeout),
                    .query_interval = set_singleton(mcast_query_interval),
                    .query_max_resp = set_singleton(mcast_query_max_resp)) :-
   nb.Logical_Switch(._uuid = ls_uuid, .other_config = other_config),
   sb.Out_Datapath_Binding(.external_ids = dp_external_ids),
   Some{var dp_str} = map_get(dp_external_ids, "logical-switch"),
   dp_str == uuid2str(ls_uuid),
   var mcast_snoop = map_get_bool_def(other_config, "mcast_snoop", false),
   var mcast_querier = map_get_bool_def(other_config, "mcast_querier", true),
   var mcast_eth_src = map_get_str_def(other_config, "mcast_eth_src", ""), //TODO: is there a way to leave a field uninitialized??
   var mcast_ip4_src = map_get_str_def(other_config, "mcast_ip4_src", ""), //TODO: is there a way to leave a field uninitialized??
   var mcast_table_size = map_get_int_def(other_config, "mcast_table_size", 2048), //TODO: hardcoded
   var mcast_idle_timeout = map_get_int_def(other_config, "mcast_idle_timeout", 300), //TODO: hardcoded and no min/max check
   var mcast_query_interval = map_get_int_def(other_config, "mcast_query_interval", 150), //TODO: hardcoded and no min/max check
   var mcast_query_max_resp = map_get_int_def(other_config, "mcast_query_max_response", 1) //TODO: hardcoded
   .

relation IgmpGroupPortSingle(
    address: string,
    dpname : string,
    chassis: uuid,
    sw_port: uuid
)

IgmpGroupPortSingle(address, dpname, chassis, lsp._uuid) :-
    sb.IGMP_Group(.address = address, .chassis = igmp_chassis_set,
                  .datapath = igmp_dp_set, .ports = pb_ports),
    Some{var chassis} = set_nth(igmp_chassis_set, 0),
    Some{var dp} = set_nth(igmp_dp_set, 0),
    sb.UUIDMap_Datapath_Binding(dpname, Left{dp}),
    &SwitchPort(.lsp = lsp),
    var pb_port_uuid = FlatMap(pb_ports),
    sb.Port_Binding(._uuid = pb_port_uuid, .logical_port = logical_port),
    lsp.name == logical_port.

relation IgmpAggregatedGroup(
    address: string,
    dpname : string,
    ports  : Set<uuid>
)

IgmpAggregatedGroup(address, dpname, ports) :-
    IgmpGroupPortSingle(.address = address, .dpname = dpname, .sw_port = lsp_uuid),
    var ports = Aggregate((address, dpname), group2set(lsp_uuid)).

