name: Build and Test

on:
  push:
  pull_request:
  schedule:
    # Run Sunday at midnight
    - cron: '0 0 * * 0'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  build-linux:
    env:
      dependencies: |
        automake libtool gcc bc libjemalloc2 libjemalloc-dev    \
        libssl-dev llvm-dev libelf-dev libnuma-dev libpcap-dev  \
        selinux-policy-dev ncat python3-scapy isc-dhcp-server
      m32_dependecies: gcc-multilib
      ARCH:        ${{ matrix.cfg.arch }}
      CC:          ${{ matrix.cfg.compiler }}
      LIBS:        ${{ matrix.cfg.libs }}
      OPTS:        ${{ matrix.cfg.opts }}
      TESTSUITE:   ${{ matrix.cfg.testsuite }}
      TEST_RANGE:  ${{ matrix.cfg.test_range }}
      SANITIZERS:  ${{ matrix.cfg.sanitizers }}

    name: linux ${{ join(matrix.cfg.*, ' ') }}
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        cfg:
        - { compiler: gcc, testsuite: system-test, test_range: "101-200" }
        - { compiler: gcc, testsuite: system-test, test_range: "201-" }
        - { compiler: clang, testsuite: system-test, sanitizers: sanitizers, test_range: "101-200" }
        - { compiler: clang, testsuite: system-test, sanitizers: sanitizers, test_range: "201-" }

    steps:
    - name: checkout
      if: github.event_name == 'push' || github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        submodules: recursive

    # For weekly runs, don't update submodules
    - name: checkout without submodule
      if: github.event_name == 'schedule'
      uses: actions/checkout@v3

    # Weekly runs test using OVS master instead of the
    # submodule.
    - name: checkout OVS master
      if: github.event_name == 'schedule'
      uses: actions/checkout@v3
      with:
        repository: 'openvswitch/ovs'
        path: 'ovs'
        ref: 'master'

    - name: update APT cache
      run:  sudo apt update

    - name: remove netcat-openbsd
      run:  sudo apt remove -y netcat-openbsd

    - name: install required dependencies
      run:  sudo apt install -y ${{ env.dependencies }}

    - name: install libunbound libunwind
      if:   matrix.cfg.arch != 'x86'
      run:  sudo apt install -y libunbound-dev libunwind-dev

    - name: install 32-bit dependencies
      if:   matrix.cfg.arch == 'x86'
      run:  sudo apt install -y ${{ env.m32_dependecies }}

    - name: update PATH
      run:  |
        echo "$HOME/bin"        >> $GITHUB_PATH
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: prepare
      run:  ./.ci/linux-prepare.sh

    - name: build
      run:  ./.ci/linux-build.sh

    - name: copy logs on failure
      if: failure() || cancelled()
      run: |
        # upload-artifact@v3 throws exceptions if it tries to upload socket
        # files and we could have some socket files in testsuite.dir.
        # Also, upload-artifact@v3 doesn't work well enough with wildcards.
        # So, we're just archiving everything here to avoid any issues.
        mkdir logs
        cp config.log ./logs/
        cp -r ./*/_build/sub/tests/testsuite.* ./logs/ || true
        # System tests are run as root, need to adjust permissions.
        sudo chmod -R +r ./tests/system-kmod-testsuite.* || true
        cp -r ./tests/system-kmod-testsuite.* ./logs/ || true
        tar -czvf logs.tgz logs/

    - name: upload logs on failure
      if: failure() || cancelled()
      uses: actions/upload-artifact@v3
      with:
        name: logs-linux-${{ join(matrix.cfg.*, '-') }}
        path: logs.tgz

